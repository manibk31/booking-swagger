# -*- mode: OpenAPI-YAML -*-

openapi: 3.0.0
servers:
  - description: OpenActive Booking API Draft
    url: https://virtserver.swaggerhub.com/theodi/booking-draft/1.0.0
info:
  description: >-
    API specification for the current draft of the Booking API.
  version: "0.4"
  title: OpenActive Booking API
  contact:
    email: phil.jackson@theoodi.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'

tags:
- name: Locations
  description: Modelling Opportunity Data v1.0
- name: Sessions
  description: Modelling Opportunity Data v1.0
- name: Customers
  description: Booking Specification v0.4 (subset)
- name: Reservations
  description: Booking Specification v0.4
- name: Orders
  description: Booking Specification v0.4
- name: Activities
  description: Modelling Opportunity Data v1.0
- name: Categories
  description: Modelling Opportunity Data v1.0

paths:
  /feed/sessions:
    parameters:
      - $ref: "#/components/parameters/LocaleHeader"
    description: >-
      Returns a feed of events that are wrapped in the Realtime Paged
      Data Exchange data-structures that make consuming the feed 
      easy.
    get:
      tags:
        - Sessions
      summary: List all events in a real-time suitable format
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PagedEventList"

  /sessions:
    parameters:
      - $ref: "#/components/parameters/LocaleHeader"
    get:
      parameters:
        - name: next
          in: query
          description: For pagination, the id of the next page to fetch.
          example: 10000
          schema:
            type: string
        - name: limit
          in: query
          description: For pagination, fetch no more than this number of items.
          example: 100
          schema:
            type: string
        - name: dateFrom
          in: query
          description: Sessions should start after this date.
          example: "2018-03-26"
          schema:
            format: date-time
            type: string
        - name: dateEnd
          in: query
          description: Sessions should finish before this date.
          example: "2018-03-26"
          schema:
            type: string
            format: date-time
        - name: timeStartFrom
          in: query
          description: Sessions should start after this time.
          example: "13:04:42.039Z"
          schema:
            format: date-time
            type: string
        - name: timeStartEnd
          in: query
          description: Sessions should finish before this time.
          example: "13:04:42.039Z"
          schema:
            format: date-time
            type: string
        - name: genderRestriction
          in: query
          description: Filter results to those suitable for given gender.
          example: Female
          schema:
            type: string
            enum:
            - Male
            - Female
            - None
        - name: dayOfWeek
          in: query
          description: Sessions should occur on these weekdays.
          example: Monday
          schema:
            type: string
            enum: [Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday]
      tags:
        - Sessions
      summary: A queriable interface for sessions
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://example.com/customers/472/bookings
                      next:
                        type: string
                        format: uri
                        example: https://example.com/customers/472/bookings?next=9210
                      last:
                        type: string
                        format: uri
                        example: https://example.com/customers/472/bookings?next=20000
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/FullEvent"

  /sessions/{sessionId}:
    parameters:
      - $ref: "#/components/parameters/LocaleHeader"
    get:
      tags:
        - Sessions
      summary: Details for a specific event
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullEvent"

  /categories:
    parameters:
      - $ref: "#/components/parameters/LocaleHeader"
    get:
      tags:
        - Categories
      summary: List all categories as a controlled vocabulary
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryList"

  /activities:
    parameters:
      - $ref: "#/components/parameters/LocaleHeader"
    get:
      tags:
        - Activities
      summary: List all activities as a controlled vocabulary
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ActivityList"

  /locations:
    parameters:
      - $ref: "#/components/parameters/LocaleHeader"
    get:
      tags:
        - Locations
      summary: List all locations
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://example.com/locations
                      next:
                        type: string
                        format: uri
                        example: https://example.com/locations?next=9210
                      last:
                        type: string
                        format: uri
                        example: https://example.com/locations?next=20000
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Place"

  /locations/{locationID}:
    parameters:
      - $ref: "#/components/parameters/LocaleHeader"
      - $ref: "#/components/parameters/locationId"
    get:
      tags:
        - Locations
      summary: Returns information about a specific location
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Place"
        404-NotFound:
          description: NOT FOUND
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        400-BadRequest:
          description: BAD REQUEST
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /locations/{locationID}/leaders:
    parameters:
      - $ref: "#/components/parameters/LocaleHeader"
      - $ref: "#/components/parameters/locationId"
    get:
      tags:
        - Locations
      summary: Lists all leaders at a given location
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Person"

  /locations/{locationID}/leaders/{leaderId}:
    parameters:
      - $ref: "#/components/parameters/LocaleHeader"
      - $ref: "#/components/parameters/leaderId"
      - $ref: "#/components/parameters/locationId"
    get:
      tags:
        - Locations
      summary: Information about a specific leader
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Person"

  /locations/{locationID}/facilities:
    parameters:
      - $ref: "#/components/parameters/LocaleHeader"
      - $ref: "#/components/parameters/locationId"
    get:
      tags:
        - Locations
      summary: Lists all facilities at a given location
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Facility"

  /customers/{customerId}/reservations:
    parameters:
      - $ref: "#/components/parameters/LocaleHeader"
      - $ref: "#/components/parameters/OnBehalfOfContactHeader"
      - $ref: "#/components/parameters/CustomerIdRequired"
      - $ref: "#/components/parameters/startDate"
      - $ref: "#/components/parameters/endDate"
    description: >-
      A list of bookings for a given customer.
    get:
      tags:
        - Customers
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://example.com/customers/472/reservations
                      next:
                        type: string
                        format: uri
                        example: https://example.com/customers/472/reservations?next=9210
                      last:
                        type: string
                        format: uri
                        example: https://example.com/customers/472/reservations?next=20000
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/BookingWithEvent"

  /customers/{customerId}/paymentmethods:
    parameters:
      - $ref: "#/components/parameters/LocaleHeader"
      - $ref: "#/components/parameters/OnBehalfOfContactHeader"
      - $ref: "#/components/parameters/CustomerIdRequired"
    description: >-
      A list of stored payment methods for a given customer.
    get:
      tags:
        - Customers
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/PaymentMethod"


  /reservations/{reservationId}:
    parameters:
      - $ref: "#/components/parameters/LocaleHeader"
      - $ref: "#/components/parameters/reservationId"
      - $ref: "#/components/parameters/OnBehalfOfContactHeader"
    get:
      tags:
        - Reservations
      summary: Fetches a reservation
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
               $ref: "#/components/schemas/BookingWithEvent"
        404-NotFound:
          description: NOT FOUND
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Reservations
      summary: Delete an individual reservation
      responses:
        204:
          description: No Content
        404-NotFound:
          description: NOT FOUND
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /customers/{customerId}/orders:
    parameters:
      - $ref: "#/components/parameters/LocaleHeader"
      - $ref: "#/components/parameters/OnBehalfOfContactHeader"
      - $ref: "#/components/parameters/CustomerIdRequired"
      - $ref: "#/components/parameters/startDate"
      - $ref: "#/components/parameters/endDate"
    description: >-
      A list of bookings for a given customer.
    get:
      tags:
        - Customers
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  links:
                    properties:
                      self:
                        type: string
                        format: uri
                        example: https://example.com/customers/472/orders
                      next:
                        type: string
                        format: uri
                        example: https://example.com/customers/472/orders?next=9210
                      last:
                        type: string
                        format: uri
                        example: https://example.com/customers/472/orders?next=20000
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/EntireOrder"

  /orders:
    parameters:
      - $ref: "#/components/parameters/LocaleHeader"
      - $ref: "#/components/parameters/OnBehalfOfContactHeader"
    description: >-
      Creates a new order. It's not unreasonable to think of this
      endpoint as a basket and the following operations will act upon
      that basket.
    post:
      tags:
        - Orders
      summary: Reserve an Event’s space for a finite amount of time
      description: >-
        Reserve an Event’s space for a finite amount of time.

        An object is created with an expiry time (which is expected to
        be equal to 180 seconds unless `beta:anonymousLeaseDuration` was
        set).

        With regards to a customer being provided with the call, there
        are two options: provided the customer can be identified from
        the authentication scheme chosen then referencing them via an
        ID is possible. Or, a full customer object can be included.

        If the lease times out before it is booked, the customer
        details provided with the lease must be discarded by the
        booking system.
      responses:
        201:
          description: Created
          headers:
            Location:
              schema:
                type: string
                example: /orders/535
                format: uri
      requestBody:
        $ref: "#/components/requestBodies/postOrder"

  /orders/{orderId}:
    parameters:
      - $ref: "#/components/parameters/LocaleHeader"
      - $ref: "#/components/parameters/orderId"
      - $ref: "#/components/parameters/OnBehalfOfContactHeader"
    get:
      tags:
        - Orders
      summary: Fetches an order with all of its items included
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
               $ref: "#/components/schemas/EntireOrder"
        404-NotFound:
          description: NOT FOUND
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    delete:
      tags:
        - Orders
      summary: Delete an individual order, including all of its order items.
      responses:
        204:
          description: No Content
        404-NotFound:
          description: NOT FOUND
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders/{orderId}/ordereditems:
    parameters:
      - $ref: "#/components/parameters/LocaleHeader"
      - $ref: "#/components/parameters/OnBehalfOfContactHeader"
      - $ref: "#/components/parameters/orderId"
    post:
      tags:
        - Orders
      summary: Add an item to an order
      description: >-
        Add a new items to the order represented by `orderId`.
      requestBody:
        $ref: "#/components/requestBodies/postOrderItem"
      responses:
        201:
          description: Created
          headers:
            Location:
              schema:
                type: string
                example: /orders/535/ordereditems/987
                format: uri
        404-NotFound:
          description: NOT FOUND
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        400-BadRequest:
          description: BAD REQUEST
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders/{orderId}/ordereditems/{itemId}:
    parameters:
      - $ref: "#/components/parameters/LocaleHeader"
      - $ref: "#/components/parameters/OnBehalfOfContactHeader"
      - $ref: "#/components/parameters/orderId"
      - $ref: "#/components/parameters/itemId"
    delete:
      tags:
        - Orders
      summary: Delete an individual item from an order
      responses:
        204:
          description: No Content
        404-NotFound:
          description: NOT FOUND
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /orders/{orderId}/payments:
    parameters:
      - $ref: "#/components/parameters/OnBehalfOfContactHeader"
      - $ref: "#/components/parameters/LocaleHeader"
    post:
      tags:
        - Orders
      summary: Make a payment on an order
      requestBody:
        $ref: "#/components/requestBodies/postPayment"
      responses:
        201:
          description: Created
        404-NotFound:
          description: NOT FOUND
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        400-BadRequest:
          description: BAD REQUEST
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  parameters:
    startDate:
      in: query
      name: startDate
      schema:
        type: string
        example: '2018-02-20T11:00:00Z'
        format: date-time
      required: true
    endDate:
      in: query
      name: endDate
      schema:
        type: string
        example: '2018-02-20T11:00:00Z'
        format: date-time
      required: true
    CustomerIdRequired:
      name: customerId
      description: Customer's identifier.
      in: path
      schema:
        example: 472
        type: string
      required: true
    LocaleHeader:
      name: Accept-Language
      description: ISO Format
      in: header
      schema:
        example: en
        type: string
      required: false
    OnBehalfOfContactHeader:
      name: X-On-Behalf-Of
      description: "Contact identifier"
      in: header
      schema:
        type: string
        nullable: true
      required: false
    reservationId:
      in: path
      name: reservationId
      schema:
        type: string
      required: true
      description: Identifies a specific reservation.
    itemId:
      in: path
      name: itemId
      schema:
        type: string
      required: true
      description: Identifies a specific item within an order.
    orderId:
      in: path
      name: orderId
      schema:
        type: string
      required: true
      description: Identifies the order.
    leaderId:
      in: path
      name: leaderId
      schema:
        type: string
      required: true
      description: Identifies the leader (person).
    locationId:
      in: path
      name: locationId
      schema:
        type: string
      required: true
      description: Identifies the location.

  schemas:
    CancelAction:
      type: object
      properties:
        type:
          example: CancelAction
          pattern: "^CancelAction"
          type: string
        name:
          type: string
          example: Cancel
        target:
          type: object
          properties:
            type:
              example: EntryPoint
              pattern: "^EntryPoint$"
              type: string
            url:
              example: http://www.example.com/customers/12/reservations/134
              type: string
              format: uri
            httpMethod:
              example: DELETE
              type: string

    PayAction:
      type: object
      properties:
        type:
          example: PayAction
          pattern: "^PayAction"
          type: string
        name:
          type: string
          example: Pay
        target:
          type: object
          properties:
            type:
              example: EntryPoint
              pattern: "^EntryPoint$"
              type: string
            url:
              example: https://example.com/orders/535/payment
              type: string
              format: uri
            httpMethod:
              $ref: '#/components/schemas/httpMethod'

    ReserveAction:
      type: object
      properties:
        type:
          example: ReserveAction
          pattern: "^ReserveAction"
          type: string
        name:
          type: string
          example: Book
        target:
          type: object
          properties:
            type:
              example: EntryPoint
              pattern: "^EntryPoint$"
              type: string
            url:
              example: https://example.com/orders
              type: string
              format: uri
            httpMethod:
              $ref: '#/components/schemas/httpMethod'

    httpMethod:
      example: POST
      type: string
      enum:
        - POST
        - GET
        - HEAD
        - PATCH
        - PUT

    categoryProp:
      type: object
      properties:
        type:
          type: string
          example: Concept
          pattern: "^Concept$"
        id:
          type: string
          example: https://example.com/reference/categories#Top%20Club%20Level
          format: uri
        prefLabel:
          type: string
          example: Top Club Level
        inScheme:
          type: string
          format: uri
          example: https://example.com/reference/categories
    activityProp:
      type: object
      properties:
        type:
          type: string
          example: Concept
          pattern: "^Concept$"
        id:
          type: string
          example: https://example.com/reference/activities#Speedball
          format: uri
        prefLabel:
          type: string
          example: Speedball
        inScheme:
          type: string
          format: uri
          example: https://example.com/reference/activities
    ErrorResponse:
      type: object
      properties:
        type:
          type: string
          description: >-
            A URI reference [RFC3986] that identifies the problem
            type. This specification encourages that, when
            dereferenced, it provide human-readable documentation for
            the problem type (e.g., using HTML
            [W3C.REC-html5-20141028]). When this member is not
            present, its value is assumed to be "about:blank".
        title:
          type: string
          description: >-
            A short, human-readable summary of the problem type. It
            SHOULD NOT change from occurrence to occurrence of the
            problem, except for purposes of localization (e.g., using
            proactive content negotiation; see [RFC7231], Section
            3.4).
        status:
          type: string
          description: >-
            The HTTP status code ([RFC7231], Section 6) generated by
            the origin server for this occurrence of the problem.
        instance:
          type: string
          description: >-
            A URI reference that identifies the specific occurrence of
            the problem. It may or may not yield further information
            if dereferenced.
        requestId:
          type: string
          description: Used by technical support for diagnostics purposes.

    EntireOrder:
      type: object
      properties:
        type:
          type: string
          example: Order
          pattern: "^Order$"
        id:
          type: string
          format: uri
          example: https://example.com/orders/535
        identifier:
          type: integer
          example: 535
        orderedItem:
          type: array
          items:
            type: object
            properties:
              type:
                type: string
                example: OrderItem
                pattern: "^OrderItem$"
              id:
                type: string
                example: https://example.com/orders/535/orderitems/987
                format: uri
              identifier:
                type: string
                example: 987
              customer:
                $ref: "#/components/schemas/Customer"
              orderedItem:
                $ref: "#/components/schemas/OrderedItem"
              amount:
                type: object
                properties:
                  type:
                    type: string
                    example: MonetaryAmount
                  value:
                    type: string
                    example: '10.00'
                  currency:
                    type: string
                    example: GBP
              subTotalPrice:
                type: object
                properties:
                  type:
                    type: string
                    example: MonetaryAmount
                  value:
                    type: string
                    example: '5.00'
                  currency:
                    type: string
                    example: GBP
        orderStatus:
          type: string
          example: OrderPaymentDue
          description: >-
            This is the status of the entire payment. As payments are
            pending, the status will be `OrderPaymentDue`, once
            payment has been met, the status will be updated to
            `OrderDelivered`. The status `EmailValidationRequired` is
            intended to hold the booking until a Customer's email
            address has been validated.
          enum:
            - OrderPaymentDue
            - OrderDelivered
            - EmailValidationRequired
        paymentDueDate:
          type: string
          example: '2018-02-20T11:00:00Z'
          format: date-time
        orderDate:
          type: string
          example: '2018-02-20T11:00:00Z'
          format: date-time
        partOfInvoice:
          type: object
          properties:
            type:
              type: string
              example: Invoice
            paymentStatus:
              type: string
              example: PaymentDue
            totalPaymentDue:
              type: object
              properties:
                type:
                  type: string
                  example: MonetaryAmount
                value:
                  type: string
                  example: '10.00'
                currency:
                  type: string
                  example: GBP
        potentialAction:
          type: array
          items:
            $ref: "#/components/schemas/PayAction"
            description: >-
              This URL is the location that accepts payment
              conformations as a POST. Once payment has been met, it is
              up to the Seller to mark the `orderStatus` as
              OrderDelivered.

    OrderedItem:
      type: object
      required:
        - orderQuantity
        - acceptedOffer
        - customer
      properties:
        type:
          type: string
          example: OrderItem
          pattern: "^OrderItem$"
        orderQuantity:
          type: integer
          example: 1
        customer:
          $ref: "#/components/schemas/Customer"
        acceptedOffer:
          example: "https://example.com/sessions/9209"
          type: string
          format: uri
        orderedItem:
          example: "https://example.com/sessions/9209"
          type: string
          format: uri

    Offer:
      type: object
      properties:
        type:
          type: string
          example: Offer
        identifier:
          type: integer
          example: 2134
        name:
          type: string
          example: Speedball winger position
        price:
          type: string
          example: 33.00
        priceCurrency:
          type: string
          example: GBP
        availabilityStarts:
          description: >-
            The beginning of the availability of the product or
            service included in the offer.
          example: "2014-04-29T12:14:35"
          format: date-time
        availabilityEnds:
          description: >-
            The end of the availability of the product or service
            included in the offer.
          example: "2014-04-29T12:14:35"
          format: date-time
        description:
          type: string
          example: Winger space for Speedball.

    Customer:
      type: string
      description: |
        Details for a customer that can be passed to a seller to
        create an account. Once the account is created, a customer
        can be represented as a URI.
      example: https://example.com/customers/472
      format: uri

    BrokerOrganization:
      type: object
      properties:
        type:
          type: string
          example: Organization
          pattern: "^Organization$"
        name:
          type: string
          example: MyFitnessApp
        url:
          type: string
          format: uri
          example: "https://myfitnessapp.example.com"

    EventOrganizer:
      type: object
      properties:
        type:
          type: string
          example: Organization
          pattern: "^Organization$"
        name:
          type: string
          example: Central Speedball Association
        url:
          type: string
          format: uri
          example: http://www.speedball-world.com

    ItemEnvelope:
      type: object
      required:
        - state
        - kind
        - id
        - modified
        - data
      properties:
        id:
          type: string
          example: 9209
          description: >-
            The id property is the unique identifier of the item. Two
            items must not share the same id. Although the IDs shown
            here are GUIDs, and other examples are numeric, this
            specification does not prescribe any specific format.
        state:
          type: string
          enum:
            - updated
            - deleted
          example: updated
          description: >-
            The state property must be of value "updated" or value
            "deleted". Deleted items are included in the response with
            a "deleted" state, but no `data` associated.
        kind:
          type: string
          example: session
        modified:
          type: string
          example: "2014-04-29T12:14:35"
          format: date-time
          description: >-
            The modified property should contain either the modified
            timestamp or change number of the item, depending on the
            ordering strategy used. It must be appropriately
            comparable to itself as either a string or integer,
            representing a chronological ordering. It must always be
            updated when any data within `data` is updated, and such
            an update must set the value of the property to be greater
            than or equal to (>=) all existing modified values. It may
            be any format, but should be an integer where
            possible. Integer values must be represented as integers,
            not strings. The value of the modified property of the
            last item must be used in either the afterTimestamp or
            afterChangeNumber parameter of the "next" URL (though such
            an item may not be included in `items` if it is filtered
            out). The format of the modified property and the relevant
            URL parameter must be identical.
        data:
          type: array
          items:
            $ref: "#/components/schemas/FullEvent"
          description: >-
            Note this property must not be included if `state` is
            "deleted".

    BookingWithEvent:
      properties:
        "@context":
          type: string
          format: uri
          example: https://www.openactive.io/ns/oa.jsonld
        type:
          type: string
          pattern: "^EventReservation$"
          example: EventReservation
        id:
          type: string
          format: uri
          example: https://www.example.com/customers/472/reservations/9765
        identifier:
          type: string
          example: 9765
        underName:
          $ref: "#/components/schemas/Customer"
        reservationStatus:
          type: string
          example: http://schema.org/ReservationConfirmed
          format: uri
        description:
          type: string
          example: Event successfully booked.
        "cancelUntil":
          type: string
          format: date-time
          example: "2018-03-27T11:18:55.181Z"
        totalPrice:
          example: "10.00"
          format: string
        priceCurrency:
          example: GBP
          format: string
        partOfOrder:
          type: string
          format: uri
          example: https://example.com/sessions/9209
        reservationFor:
          type: object
          properties:
            type:
              type: string
              example: Event
            identifier:
              type: integer
              example: 9209
            id:
              type: string
              example: https://example.com/sessions/9209
              format: uri
            name:
              type: string
              example: Speedball
            startDate:
              type: string
              example: '2018-01-27T11:00:00Z'
              format: date-time
            endDate:
              type: string
              example: '2018-01-27T12:00:00Z'
              format: date-time
            duration:
              type: string
              example: PT1H
              description: Duration of the event.
            location:
              $ref: "#/components/schemas/Place"
            leader:
              $ref: "#/components/schemas/Person"
        potentialAction:
          type: array
          items:
            $ref: "#/components/schemas/CancelAction"

    FullEvent:
      type: object
      properties:
        "@context":
            type: string
            format: uri
            example: https://www.openactive.io/ns/oa.jsonld
        type:
          type: string
          example: Event
        identifier:
          type: integer
          example: 9209
        id:
          type: string
          example: https://example.com/sessions/9209
          format: uri
        name:
          type: string
          example: Speedball
        organizer:
          $ref: "#/components/schemas/EventOrganizer"
        offers:
          type: array
          items:
            $ref: "#/components/schemas/Offer"
        "beta:anonymousLeaseDuration":
          type: string
          example: "PT15M"
          description: >-
            When an order is posted to `beta:orderPostUrl`, the
            default lease time will be 180 seconds unless this field
            is set.
        eventStatus:
          type: string
          example: http://schema.org/EventScheduled
          enum:
            - http://schema.org/EventCancelled
            - http://schema.org/EventPostponed
            - http://schema.org/EventRescheduled
            - http://schema.org/EventScheduled
        maximumAttendeeCapacity:
          type: number
          example: 30
        remainingAttendeeCapacity:
          type: number
          example: 20
        waitingListCount:
          type: number
          example: 10
        genderRestriction:
          type: string
          example: http://openactive.io/ns#Female
        category:
          $ref: "#/components/schemas/categoryProp"
        activity:
          $ref: "#/components/schemas/activityProp"
        description:
          type: string
          example: >-
            An action packed, fast paced game that incorporates
            netball, handball and football.
        startDate:
          type: string
          example: '2018-01-27T11:00:00Z'
          format: date-time
        endDate:
          type: string
          example: '2018-01-27T12:00:00Z'
          format: date-time
        duration:
          type: string
          example: PT1H
          description: Duration of the event.
        location:
          $ref: "#/components/schemas/Place"
        facility:
          type: array
          items:
            $ref: "#/components/schemas/Facility"
        leader:
          $ref: "#/components/schemas/Person"
        ageRange:
          type: string
          example: 16-55
          description: A suitable age range for an event.
        sameAs:
          type: array
          description: >-
            URL of a reference Web page that unambiguously indicates
            the item's identity. E.g. the URL of the item's Wikipedia
            page, Wikidata entry, or official website.
          items:
            type: string
            format: uri
            example:
              - http://www.facebook.com/speedball
              - https://www.twitter.com/speedball
              - http://www.speedball-world.com
        potentialAction:
          type: array
          items:
            $ref: "#/components/schemas/ReserveAction"
            description: >-
              This is the URL to which an order can be POSTed in order
              to add it to an order. By default, a lease for the order
              will be 180 seconds unless otherwise specified in
              `beta:anonymousLeaseDuration`.

    OrderedEvent:
      type: object
      properties:
        type:
          type: string
          example: Event
        identifier:
          type: integer
          example: 9209
        id:
          type: string
          example: https://example.com/sessions/9209
          format: uri
        organizer:
          $ref: "#/components/schemas/EventOrganizer"
        customer:
          $ref: "#/components/schemas/Customer"
        name:
          type: string
          example: Speedball
        description:
          type: string
          example: >-
            An action packed, fast paced game that incorporates
            netball, handball and football.
        startDate:
          type: string
          example: '2018-01-27T11:00:00Z'
          format: date-time
        acceptedOffer:
          example: "https://example.com/sessions/9209"
          type: string
          format: uri

    RequestDiscount:
      type: array
      description: >-
        A cut-down discount object that's used to let a seller know
        that a discount code is being applied.
      items:
        type: object
        properties:
          type:
            type: string
            example: Discount
            pattern: "^Discount$"
          discountCode:
            type: string
            example: ABCD1234
            description: >-
              A code that represents a discount that a customer might
              have access to and want to apply to an order.

    Person:
      type: object
      properties:
        type:
          type: string
          example: Person
        givenName:
          type: string
          example: Nicole
        familyName:
          type: string
          example: Smith
        id:
          type: string
          example: https://example.com/locations/1234ABCD/leaders/89
        identifier:
          type: string
          example: 89

    Category:
      type: object
      properties:
        type:
          type: string
          example: Concept
        prefLabel:
          type: string
          example: Top Club Level
        id:
          type: string
          format: uri
          example: https://example.com/reference/categories#Top%20Club%20Level

    Activity:
      type: object
      properties:
        type:
          type: string
          example: Concept
        prefLabel:
          type: string
          example: Ball Games
        narrower:
          type: object
          required:
            - prefLabel
          properties:
            type:
              type: string
              example: Concept
              pattern: "^Concept$"
            id:
              type: string
              format: uri
              example: https://example.com/reference/activities#Speedball
            prefLabel:
              type: string
              example: Speedball
            altLabel:
              type: string
              example: Speedball

    JsonApiPagedEventList:
      type: object
      properties:
        links:
          type: object
          properties:
            self:
              type: string
              format: uri
              example: https://example.com/sessions
            next:
              type: string
              format: uri
              example: https://example.com/sessions?next=9210
            last:
              type: string
              format: uri
              example: https://example.com/sessions?next=20000
        data:
          type: array
          items:
            $ref: "#/components/schemas/FullEvent"

    PagedEventList:
      type: object
      required:
        - next
        - items
        - license
      properties:
        next:
          type: string
          format: uri
          example: https://example.com/sessions?afterId=100&afterTimestamp=3887825979
          description: >-
            The next URL is a precomputed URL to be called by the data
            consumer (System 2) to get the next page of data. The next
            URL must be calculated from the last item used to generate
            the current page, and use the current page's own URL if no
            items exist. Not all items in the current page may be
            visible in the case of filtering so the last item used may
            not be contained within items. The next URL must be an
            absolute URL. Note "polling" and "paging" are
            differentiated only by the duration between
            requests.
        license:
          type: string
          format: uri
          example: https://creativecommons.org/licenses/by/4.0/
          description: >-
            Reference to the license under which the data has been
            published. Any website that links to this endpoint should
            also include text such as "This opportunity data is owned
            by My Company Ltd and is licensed under the Creative
            Commons Attribution Licence (CC-BY v4.0) for anyone to
            access, use and share.".
        items:
          type: array
          items:
            $ref: "#/components/schemas/ItemEnvelope"
          description: >-
            An array of `item`. This should simply be empty [] if no
            results are returned. The items property being empty is
            not sufficient to indicate the last page.

    CategoryList:
      type: object
      properties:
        type:
          type: string
          example: ConceptScheme
          pattern: "^ConceptScheme$"
        url:
          type: string
          example: http://www.example.org/categories
        title:
          type: string
          example: Category List
        concepts:
          type: array
          items:
            $ref: "#/components/schemas/Category"

    ActivityList:
      type: object
      properties:
        type:
          type: string
          example: ConceptScheme
          pattern: "^ConceptScheme$"
        url:
          type: string
          example: http://www.example.org/activities
        title:
          type: string
          example: Activity List
        concepts:
          type: array
          items:
            $ref: "#/components/schemas/Activity"

    Place:
      type: object
      properties:
        type:
          type: string
          example: Place
          pattern: "^Place$"
        id:
          type: string
          example: "https://example.com/locations/1234ABCD"
          format: uri
        identifier:
          type: string
          example: 1234ABCD
        name:
          type: string
          example: Raynes Park High School
        description:
          type: string
          example: Raynes Park High School in London
        telephone:
          type: string
          example: 01253 473934
        geo:
          required:
            - type
            - latitude
            - longitude
          type: object
          properties:
            type:
              type: string
              example: GeoCoordinates
              pattern: "^GeoCoordinates$"
            latitude:
              type: number
              example: 51.4034423828125
            longitude:
              type: number
              example: -0.2369088977575302
        address:
          type: object
          properties:
            type:
              type: string
              example: PostalAddress
            streetAddress:
              type: string
              example: Raynes Park High School, 46A West Barnes Lane
            addressLocality:
              type: string
              example: New Malden
            addressRegion:
              type: string
              example: London
            postalCode:
              type: string
              example: NW5 3DU

    Facility:
      type: object
      properties:
        type:
          type: string
          example: Place
          pattern: "^Place$"
        id:
          type: string
          example: "https://example.com/locations/1234ABCD/facilities/123"
          format: uri
        identifier:
          type: string
          example: 1234ABCD
        name:
          type: string
          example: Swimming Pool
        description:
          type: string
          example: Olympic length pool
        geo:
          required:
            - type
            - latitude
            - longitude
          type: object
          properties:
            type:
              type: string
              example: GeoCoordinates
              pattern: "^GeoCoordinates$"
            latitude:
              type: number
              example: 51.4034423828125
            longitude:
              type: number
              example: -0.2369088977575302

    PaymentMethod:
      type: object
      properties:
        type:
          type: string
          pattern: "^PaymentMethod"
          example: PaymentMethod
        id:
          type: string
          format: uri
          example: https://www.example.com/customers/472/paymentmethods/9765
        additionalType:
          type: string
          format: uri
          example: http://purl.org/goodrelations/v1#CreditCard
        name:
          type: string
          example: 'Primary credit card'
        accountNumber:
          type: string
          example: '123456789'
        expires:
          type: string
          example: '2018-02-20T11:00:00Z'
          format: date-time

    ResponseDiscount:
      type: array
      description: >-
        A more detailed discount object that provides more details
        about the discount being applied.
      items:
        type: object
        properties:
          type:
            type: string
            example: Discount
            pattern: "^Discount$"
          identifier:
            type: string
            example: ZXCVB1234
          discountCode:
            type: string
            example: ABCD1234
          amount:
            type: object
            properties:
              type:
                type: string
                example: MonetaryAmount
              value:
                type: string
                example: "5.00"
              currency:
                type: string
                example: GBP

  requestBodies:
    postPayment:
      content:
        application/json:
          schema:
            type: object
            properties:
              type:
                type: string
                pattern: "^Payment$"
                example: Payment
              paymentMethod:
                type: string
                format: uri
                example: https://www.example.com/customers/472/paymentmethods/9765
              totalPaidToProvider:
                type: object
                properties:
                  type:
                    type: string
                    example: MonetaryAmount
                  value:
                    type: string
                    example: '8.00'
                  currency:
                    type: string
                    example: GBP
              totalPaidByCustomer:
                type: object
                properties:
                  type:
                    type: string
                    example: MonetaryAmount
                  value:
                    type: string
                    example: '5.00'
                  currency:
                    type: string
                    example: GBP

    postOrderItem:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/OrderedItem"

    postOrder:
      description: Order object that needs to be added to the store
      required: true
      content:
        application/json:
          schema:
            type: object
            required:
              - broker
              - orderedItem
              - customer
            properties:
              type:
                type: string
                example: Order
                pattern: "^Order$"
              customer:
                $ref: "#/components/schemas/Customer"
              broker:
                $ref: "#/components/schemas/BrokerOrganization"
              orderedItem:
                $ref: "#/components/schemas/OrderedItem"
